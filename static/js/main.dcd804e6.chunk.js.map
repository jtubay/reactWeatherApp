{"version":3,"sources":["component/FormComponent.jsx","component/weatherComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","minmaxTemp","min","max","Weather","city","weatherIcon","temp_celsius","temp_min","temp_max","description","App","getWeather","e","a","async","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd804e6.chunk.js","sourcesContent":["import React from 'react';\nimport \"./formStyle.css\"\n\nconst Form = props => {\n    return(\n        <div className=\"container\">\n            <div>{props.error ? error() : null}</div>\n            <form onSubmit={props.loadweather}>\n            <div className=\"row\">\n                <div className=\"col-md-3 offset-md-2\">\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\"\n                    placeholder=\"City\"\n                    />\n                </div>\n                <div className=\"col-md-3\">\n                    <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\"\n                    placeholder=\"Country\"\n                    />\n                </div>\n                <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\n                    <button className=\"btn btn-warning\">Get Weather</button>\n                </div>\n            </div>\n            </form>\n        </div>\n    )\n}\n\nfunction error () {\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter City and Country\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Weather = (props) => {\n    return(\n        <div className=\"container text-light\">\n            <div className=\"cards pt-5\">\n                <h1>\n                    {props.city}\n                </h1>\n                <h5>\n                <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                {props.temp_celsius ? (<h1 className='py-2'>{props.temp_celsius}&deg;</h1>) : null}\n                {minmaxTemp(props.temp_min, props.temp_max)}\n                <h4 className='py-3'>{props.description}</h4>\n            </div>\n        </div>\n    );\n}\n\nconst minmaxTemp = (min, max) =>{\n    if(min && max){\n        return(\n            <div>\n            <h3>\n                <span className=\"px-4\">\n                    {min}&deg;\n                </span>\n                <span className=\"px-4\">\n                    {max}&deg;\n                </span>\n            </h3>\n        </div>\n        )\n    }\n\n}\nexport default Weather;","import React, {Component} from 'react';\nimport Form from \"./component/FormComponent.jsx\"\nimport \"./weather-icons/css/weather-icons.min.css\"\nimport './App.css';\nimport Weather from './component/weatherComponent.jsx'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst API_key = 'fe933f641e0c1a4f579c0970f5038d4c'\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      city : undefined,\n      country : undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false\n    };\n    \n\n    this.weatherIcon ={\n      Thunderstorm : \"wi-thunderstorm\",\n      Drizzle : \"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n\n  }\n  calCelsius(temp){\n    let cell = Math.floor(temp - 273.15)\n    return cell\n  }\n  get_WeatherIcon(icons, rangeId){\n    switch(true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon:this.weatherIcon.Thunderstorm})\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon:this.weatherIcon.Drizzle})\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon:this.weatherIcon.Rain})\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon:this.weatherIcon.Snow})\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon:this.weatherIcon.Atmosphere})\n        break;\n      case rangeId === 800:\n        this.setState({icon:this.weatherIcon.Clear})\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon:this.weatherIcon.Clouds})\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Clouds})\n\n    }\n  }\n\n\n  getWeather = async(e) =>{\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if(city && country){\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}\n      `);\n      const response = await api_call.json()\n      console.log(response)\n      this.setState({\n        city:`${response.name}, ${response.sys.country}`,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max:this.calCelsius(response.main.temp_max),\n        temp_min:this.calCelsius(response.main.temp_min),\n        description:response.weather[0].description,\n        error:false\n      })\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n    } else{\n      this.setState({error : true})\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Form loadweather = {this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}